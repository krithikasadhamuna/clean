NETWORK CANVAS API RESPONSE - DETAILED STRUCTURE

API ENDPOINT:
GET /api/backend/network-topology?hierarchy=desc

RESPONSE FORMAT:
{
  "status": "success",
  "network_nodes": [
    {
      "id": "zone_external",
      "name": "External Network", 
      "type": "gateway",
      "x": 10,
      "y": 20,
      "agents": [
        {
          "id": "phantomstrike_ai",
          "name": "PhantomStrike AI",
          "type": "attack",
          "platform": "LangChain Agent",
          "services": ["attack_planning", "scenario_execution"],
          "status": "active",
          "importance": "high"
        }
      ],
      "status": "normal"
    },
    {
      "id": "zone_internal",
      "name": "SOC Infrastructure",
      "type": "server",
      "x": 160,
      "y": 20,
      "agents": [
        {
          "id": "guardian_alpha_ai",
          "name": "GuardianAlpha AI", 
          "type": "detection",
          "platform": "LangChain Agent",
          "services": ["threat_detection", "log_analysis"],
          "status": "active",
          "importance": "critical"
        }
      ],
      "status": "secure"
    },
    {
      "id": "zone_dmz",
      "name": "Security Fabric",
      "type": "firewall",
      "x": 310,
      "y": 20,
      "agents": [
        {
          "id": "sentinel_deploy_ai",
          "name": "SentinelDeploy AI",
          "type": "deploy", 
          "platform": "LangChain Agent (Development)",
          "services": ["policy_deployment", "auto_remediation"],
          "status": "inactive",
          "importance": "medium"
        }
      ],
      "status": "development"
    },
    {
      "id": "zone_intelligence",
      "name": "Threat Intelligence Platform",
      "type": "database",
      "x": 460,
      "y": 20,
      "agents": [
        {
          "id": "threat_mind_ai",
          "name": "ThreatMind AI",
          "type": "intelligence",
          "platform": "LangChain Agent (Development)", 
          "services": ["threat_intelligence", "ioc_analysis"],
          "status": "inactive",
          "importance": "high"
        }
      ],
      "status": "development"
    }
  ],
  "metadata": {
    "data_source": "real_topology",
    "total_nodes": 4,
    "total_agents": 4,
    "generated_from_logs": true,
    "hierarchy": "desc",
    "sort_by": "importance",
    "generated_at": "2024-09-26T11:00:00.000Z"
  }
}

NETWORK NODE STRUCTURE BREAKDOWN:

Each NetworkNode contains:

1. NODE IDENTIFICATION:
   - id: Unique identifier (e.g., "zone_external", "zone_internal")
   - name: Human-readable name (e.g., "External Network", "SOC Infrastructure")
   - type: Node type ("gateway", "server", "firewall", "database", "workstation")

2. POSITIONING:
   - x: X coordinate for canvas positioning (starts at 10, increments by 150)
   - y: Y coordinate for canvas positioning (starts at 20, increments by 100 when wrapping)

3. AGENT ASSIGNMENT:
   - agents: Array of agents assigned to this network zone
   - Each agent includes:
     * id: Agent identifier
     * name: Display name
     * type: Agent type ("attack", "detection", "deploy", "intelligence")
     * platform: Platform info
     * services: Array of capabilities/services
     * status: Current status ("active", "inactive", "idle")
     * importance: Priority level ("low", "medium", "high", "critical")

4. STATUS:
   - status: Overall zone status ("normal", "secure", "alert", "compromised", "development")

COORDINATE SYSTEM:

Starting Position: x=10, y=20
Horizontal Spacing: x += 150 for each new zone
Vertical Wrapping: When x > 500, reset x=10 and y += 100

Example Coordinates:
- Zone 1: x=10, y=20
- Zone 2: x=160, y=20  
- Zone 3: x=310, y=20
- Zone 4: x=460, y=20
- Zone 5: x=10, y=120 (wrapped)

AGENT FILTERING:

Agents are automatically assigned to zones based on their location:
- "External Network" → zone_external
- "SOC Infrastructure" → zone_internal
- "Security Fabric" → zone_dmz
- "Threat Intelligence Platform" → zone_intelligence

DYNAMIC BEHAVIOR:

1. REAL-TIME UPDATES:
   - Topology built from last 24 hours of logs
   - Agent status reflects current state
   - New agents automatically appear when they connect

2. EMPTY ZONES:
   - Zones with no agents are excluded from response
   - Only populated zones are returned

3. SORTING:
   - hierarchy="desc": Most important zones first
   - hierarchy="asc": Least important zones first
   - Based on zone importance and agent count

FRONTEND USAGE:

To render the network canvas:

1. GET /api/backend/network-topology
2. For each network_node in response:
   - Position at (node.x, node.y) coordinates
   - Render node.name as label
   - Show node.agents.length as agent count
   - Color by node.status
   - Show agent details on hover/click

3. Agent Details:
   - Access via node.agents array
   - Each agent has full details for tooltips/modals
   - Status colors: active=green, inactive=gray, idle=yellow

CONNECTIONS:

Network connections between zones are included in topology.connections
Structure: { from: "zone_id", to: "zone_id", type: "connection_type", strength: number }

This provides a complete network visualization with real-time agent positioning and status!

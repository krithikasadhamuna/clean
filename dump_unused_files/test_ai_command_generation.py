#!/usr/bin/env python3
"""
Test AI Command Generation
Tests if the AI attack planning generates commands for client agents
"""

import requests
import json
import time

def test_ai_command_generation():
    """Test AI command generation for client agents"""
    print("=" * 80)
    print("TESTING AI COMMAND GENERATION")
    print("=" * 80)
    
    base_url = "http://127.0.0.1:8081"
    
    # Test 1: Server Health
    print("\n1. Testing Server Health...")
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print(f"SUCCESS: Server Health: {health_data['status']}")
        else:
            print(f"FAILED: Server health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"FAILED: Server health check error: {e}")
        return False
    
    # Test 2: Register a Test Agent
    print("\n2. Registering Test Agent...")
    try:
        agent_data = {
            "agent_id": "ai_test_agent_001",
            "hostname": "ai-test-machine",
            "platform": "windows",
            "ip_address": "192.168.1.100"
        }
        
        response = requests.post(
            f"{base_url}/api/agents/register",
            json=agent_data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"SUCCESS: Agent registered: {result.get('agent_id', 'Unknown')}")
        else:
            print(f"FAILED: Agent registration failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"FAILED: Agent registration error: {e}")
        return False
    
    # Test 3: AI Attack Planning
    print("\n3. Testing AI Attack Planning...")
    try:
        attack_request = {
            "scenario": "Create a sophisticated phishing attack targeting executives with credential harvesting and lateral movement",
            "target_network": "192.168.1.0/24",
            "objectives": ["Credential harvesting", "Lateral movement", "Data exfiltration", "Persistence establishment"]
        }
        
        response = requests.post(
            f"{base_url}/api/soc/plan-attack",
            json=attack_request,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print(f"SUCCESS: AI attack planning successful!")
                print(f"   Operation Type: {result.get('operation_type', 'Unknown')}")
                
                # Show the AI's response
                ai_result = result.get('result', {})
                if isinstance(ai_result, dict) and 'output' in ai_result:
                    output = ai_result['output']
                    print(f"   AI Response Length: {len(str(output))} characters")
                    
                    # Show a preview of the AI response
                    if len(str(output)) > 500:
                        print(f"   AI Response Preview: {str(output)[:500]}...")
                    else:
                        print(f"   AI Response: {output}")
                else:
                    print(f"   AI Result: {ai_result}")
            else:
                print(f"FAILED: AI attack planning failed: {result.get('error', 'Unknown error')}")
                return False
        else:
            print(f"FAILED: AI attack planning failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"FAILED: AI attack planning error: {e}")
        return False
    
    # Test 4: Check for Generated Commands
    print("\n4. Checking for Generated Commands...")
    try:
        # Wait a moment for commands to be generated
        time.sleep(3)
        
        response = requests.get(
            f"{base_url}/api/agents/ai_test_agent_001/commands",
            timeout=10
        )
        
        if response.status_code == 200:
            commands = response.json()
            command_count = len(commands.get('commands', []))
            print(f"SUCCESS: Retrieved {command_count} pending commands")
            
            if command_count > 0:
                print("   Commands generated by AI:")
                for i, cmd in enumerate(commands.get('commands', []), 1):
                    print(f"     {i}. Technique: {cmd.get('technique', 'Unknown')}")
                    print(f"        Status: {cmd.get('status', 'Unknown')}")
                    print(f"        Command ID: {cmd.get('command_id', 'Unknown')}")
                    if 'command_data' in cmd:
                        cmd_data = cmd['command_data']
                        if isinstance(cmd_data, dict):
                            print(f"        Data: {json.dumps(cmd_data, indent=8)}")
                        else:
                            print(f"        Data: {cmd_data}")
                    print()
            else:
                print("   No commands generated (this may be normal)")
                print("   The AI may not be generating commands yet")
        else:
            print(f"FAILED: Command retrieval failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"FAILED: Command check error: {e}")
        return False
    
    # Test 5: Test Command Execution (Simulation)
    print("\n5. Testing Command Execution (Simulation)...")
    try:
        # Simulate command execution result
        command_result = {
            "command_id": "test_cmd_001",
            "status": "completed",
            "success": True,
            "output": "Simulated command execution successful",
            "execution_time_ms": 1500,
            "timestamp": "2025-10-01T19:20:00.000Z"
        }
        
        response = requests.post(
            f"{base_url}/api/agents/ai_test_agent_001/commands/result",
            json=command_result,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"SUCCESS: Command result submitted: {result.get('status', 'Success')}")
            print(f"   Command ID: {command_result['command_id']}")
            print(f"   Status: {command_result['status']}")
            print(f"   Output: {command_result['output']}")
        else:
            print(f"FAILED: Command result submission failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"FAILED: Command execution simulation error: {e}")
        return False
    
    return True

def main():
    """Main test function"""
    print("Testing AI command generation and execution...")
    print("This will test:")
    print("- Server health")
    print("- Agent registration")
    print("- AI attack planning")
    print("- Command generation")
    print("- Command execution simulation")
    print()
    
    success = test_ai_command_generation()
    
    print("\n" + "=" * 80)
    if success:
        print("AI COMMAND GENERATION TEST COMPLETED SUCCESSFULLY!")
        print("=" * 80)
        print("SUCCESS: Server is running and healthy")
        print("SUCCESS: Agent registration works")
        print("SUCCESS: AI attack planning is working")
        print("SUCCESS: Command queue is accessible")
        print("SUCCESS: Command execution simulation works")
        print("\nThe AI command generation system is working!")
        print("The development environment is fully operational!")
    else:
        print("AI COMMAND GENERATION TEST FAILED")
        print("=" * 80)
        print("FAILED: Some AI command generation is not working")
        print("Please check the server logs for more details")
    
    return success

if __name__ == "__main__":
    main()
